name: Tests

on: [push, pull_request]

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        include:
        # TODO: arm64
        # latest and one version older for valgrind
        - nginx: "1.17.8"
          openssl: "1.0.2u"
          valgrind: "valgrind"
        - nginx: "1.17.8"
          openssl: "1.1.1i"
          valgrind: "valgrind"
        - nginx: "1.19.3"
          openssl: "1.0.2u"
          valgrind: "valgrind"
        - nginx: "1.19.3"
          openssl: "1.1.1i"
          valgrind: "valgrind"
        # two versions older nginx with 1.0.2 and 1.1.1
        - nginx: "1.15.8"
          openssl: "1.0.2u"
        - nginx: "1.15.8"
          openssl: "1.1.1i"
        # latest version with EOL 1.1.0
        - nginx: "1.19.3"
          openssl: "1.1.0l"
        # # version that kong uses, for fips
        # - nginx: "1.17.8"
        #   openssl: "1.0.2u"
        #   fips: "2.0.16"
        #   openssl_opts: "fips --with-fipsdir=/home/runner/work/cache/ssl/fips"
        # latest and one older version with alpha release
        - nginx: "1.17.8"
          openssl: "3.0.0-alpha10"
          nginx_cc_opts: "-Wno-error"
        - nginx: "1.19.3"
          openssl: "3.0.0-alpha10"
          nginx_cc_opts: "-Wno-error"

    env:
      JOBS: 3
      SH: bash
      NGX_BUILD_JOBS: 3
      BASE_PATH: /home/runner/work/cache
      LUAJIT_PREFIX: /home/runner/work/cache/luajit21
      LUAJIT_LIB: /home/runner/work/cache/luajit21/lib
      LUAJIT_INC: /home/runner/work/cache/luajit21/include/luajit-2.1
      LUA_INCLUDE_DIR: /home/runner/work/cache/luajit21/include/luajit-2.1
      OPENSSL_PREFIX: /home/runner/work/cache/ssl
      OPENSSL_LIB: /home/runner/work/cache/ssl/lib
      OPENSSL_INC: /home/runner/work/cache/ssl/include
      TEST_NGINX_SLEEP: 0.005
      TEST_NGINX_RANDOMIZE: 1
      LUACHECK_VER: 0.21.1
      CC: gcc
      NGX_BUILD_CC: gcc
  
      NGINX_VERSION: ${{ matrix.nginx }}
      OPENSSL_VER: ${{ matrix.openssl }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/cache
        key: ${{ runner.os }}-${{ hashFiles('**/tests.yml') }}-nginx-${{ matrix.nginx }}-openssl-${{ matrix.openssl }}-${{ matrix.fips }}

    - name: Setup tools
      run: |
        sudo apt-get install -qq -y cpanminus axel ca-certificates valgrind haveged
        mkdir -p $OPENSSL_PREFIX $LUAJIT_PREFIX
        # perl cache
        pushd /home/runner/work/cache
        if [ ! -e perl ]; then sudo cpanm --notest Test::Nginx > build.log 2>&1 || (cat build.log && exit 1); cp -r /usr/local/share/perl/ .; else sudo cp -r perl /usr/local/share; fi
        # build tools at parent directory of cache
        cd ..
        git clone https://github.com/openresty/openresty.git ./openresty
        git clone https://github.com/openresty/nginx-devel-utils.git
        git clone https://github.com/simpl/ngx_devel_kit.git ./ndk-nginx-module
        git clone https://github.com/openresty/lua-nginx-module.git ./lua-nginx-module -b v0.10.17
        git clone https://github.com/openresty/no-pool-nginx.git ./no-pool-nginx
        git clone https://github.com/fffonion/lua-resty-openssl-aux-module ./lua-resty-openssl-aux-module
        # lua libraries at parent directory of current repository
        popd
        git clone https://github.com/openresty/lua-resty-core.git ../lua-resty-core -b v0.1.19
        git clone https://github.com/openresty/lua-resty-lrucache.git ../lua-resty-lrucache
        git clone https://github.com/jkeys089/lua-resty-hmac ../lua-resty-hmac && pushd ../lua-resty-hmac && git checkout 79a4929 && popd
        git clone https://github.com/openresty/lua-resty-string ../lua-resty-string
    
    - name: Build OpenSSL
      env:
        FIPS: ${{ matrix.fips }}
        OPENSSL_OPTS: ${{ matrix.openssl_opts }}
      run: |
        mkdir -p $OPENSSL_PREFIX
        if [ "X$FIPS" != "X" ]; then wget https://www.openssl.org/source/old/fips/openssl-fips-$FIPS.tar.gz -O - | tar zxf - ; pushd openssl-fips-$FIPS/; FIPSDIR=$OPENSSL_PREFIX/fips ./config; make -j$JOBS; make install; popd; fi
        if [ "X$OPENSSL_HASH" != "X" ]; then wget https://github.com/openssl/openssl/archive/$OPENSSL_HASH.tar.gz -O - | tar zxf ; pushd openssl-$OPENSSL_HASH/; fi
        if [ "X$OPENSSL_HASH" = "X" ] ; then wget https://www.openssl.org/source/openssl-$OPENSSL_VER.tar.gz -O - | tar zxf -; pushd openssl-$OPENSSL_VER/; fi
        if [ ! -e $OPENSSL_PREFIX/include ]; then ./config shared -d --prefix=$OPENSSL_PREFIX -DPURIFY $OPENSSL_OPTS > build.log 2>&1 || (cat build.log && exit 1); fi
        if [ ! -e $OPENSSL_PREFIX/include ]; then make -j$JOBS > build.log 2>&1 || (cat build.log && exit 1); fi
        if [ ! -e $OPENSSL_PREFIX/include ]; then sudo make PATH=$PATH install_sw > build.log 2>&1 || (cat build.log && exit 1); fi
        mkdir -p $OPENSSL_PREFIX/certs/ && cp -r /etc/ssl/certs/* $OPENSSL_PREFIX/certs/

    - name: Build LuaJIT
      env:
        LUAJIT_CC_OPTS: ${{ matrix.luajit_cc_opts }}
        USE_VALGRIND: ${{ matrix.valgrind }}
      run: |
        if ["$USE_VALGRIND" != ""]; then LUAJIT_CC_OPTS="$LUAJIT_CC_OPTS -DLUAJIT_NUMMODE=2 -DLUAJIT_USE_VALGRIND -DLUAJIT_USE_SYSMALLOC -O0"; fi
        export
        cd $LUAJIT_PREFIX
        if [ ! -e luajit2 ]; then git clone -b v2.1-agentzh https://github.com/openresty/luajit2.git; fi
        cd luajit2
        make -j$JOBS CCDEBUG=-g Q= PREFIX=$LUAJIT_PREFIX CC=$CC XCFLAGS="-DLUA_USE_APICHECK -DLUA_USE_ASSERT -DLUAJIT_ENABLE_LUA52COMPAT $LUAJIT_CC_OPTS" > build.log 2>&1 || (cat build.log && exit 1)
        make install PREFIX=$LUAJIT_PREFIX > build.log 2>&1 || (cat build.log && exit 1)

    - name: Build lua-cjson
      run: |
        if [ ! -e lua-cjson ]; then git clone https://github.com/openresty/lua-cjson.git ./lua-cjson; fi
        pushd ./lua-cjson && make && sudo PATH=$PATH make install && popd

    - name: Build Nginx
      env:
        NGINX_CC_OPTS: ${{ matrix.nginx_cc_opts }}
        USE_VALGRIND: ${{ matrix.valgrind }}
      run: |
        if ["$USE_VALGRIND" != ""]; then NGINX_CC_OPTS="$NGINX_CC_OPTS -O0"; fi
        export PATH=$BASE_PATH/work/nginx/sbin:$BASE_PATH/../nginx-devel-utils:$PATH
        export LD_LIBRARY_PATH=$LUAJIT_LIB:$LD_LIBRARY_PATH
        export NGX_LUA_LOC=$BASE_PATH/../lua-nginx-module
        export NGX_STREAM_LUA_LOC=$BASE_PATH/../stream-lua-nginx-module
        export
        cd $BASE_PATH
        if [ ! -e work ]; then ngx-build $NGINX_VERSION --add-module=../ndk-nginx-module --add-module=../lua-nginx-module --add-module=../lua-resty-openssl-aux-module --with-http_ssl_module --with-cc-opt="-I$OPENSSL_INC $NGINX_CC_OPTS" --with-ld-opt="-L$OPENSSL_LIB -Wl,-rpath,$OPENSSL_LIB" --with-debug > build.log 2>&1 || (cat build.log && exit 1); fi
        nginx -V
        ldd `which nginx`|grep -E 'luajit|ssl|pcre'

    - name: Run Test
      run: |
        export LD_LIBRARY_PATH=$LUAJIT_LIB:$LD_LIBRARY_PATH
        export PATH=$BASE_PATH/work/nginx/sbin:$PATH
        TEST_NGINX_TIMEOUT=10 prove -j$JOBS -r t/ 2>&1

        echo "Nginx SSL plain FFI"
        export CI_SKIP_NGINX_C=1
        TEST_NGINX_TIMEOUT=10 prove -j$JOBS t/openssl/ssl*.t 2>&1

    - name: Run Valgrind
      if: ${{ matrix.valgrind != '' }}
      run: |
        export LD_LIBRARY_PATH=$LUAJIT_LIB:$LD_LIBRARY_PATH
        export TEST_NGINX_USE_VALGRIND='--num-callers=100 -q --tool=memcheck --leak-check=full --show-possibly-lost=no --gen-suppressions=all --suppressions=valgrind.suppress --track-origins=yes' TEST_NGINX_TIMEOUT=60 TEST_NGINX_SLEEP=1
        export PATH=$BASE_PATH/work/nginx/sbin:$PATH
        stdbuf -o 0 -e 0 prove -j$JOBS -r t/ 2>&1 | grep -v "Connection refused" | grep -v "Retry connecting after" | tee output.log
        if grep -q 'insert_a_suppression_name_here' output.log; then echo "Valgrind found problems"; exit 1; fi

        echo "Nginx SSL plain FFI"
        export CI_SKIP_NGINX_C=1
        stdbuf -o 0 -e 0 prove -j$JOBS t/openssl/ssl*.t 2>&1 | grep -v "Connection refused" | grep -v "Retry connecting after" | tee output.log
        if grep -q 'insert_a_suppression_name_here' output.log; then echo "Valgrind found problems"; exit 1; fi
        